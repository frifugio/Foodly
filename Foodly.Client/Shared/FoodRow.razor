<tr>
    <th scope="row">
        <p>@Food.Name</p>
    </th>

    @{
        int actualCount = Food.ActualQuantity;
    }

    @for (int i = 0; i < Food.MaxQuantity + Food.OptionalQuantity + Food.OverQuantity; i++)
    {
        string checkClass = "abc-checkbox-success";
        if ((i >= Food.MaxQuantity && i < Food.MaxQuantity + Food.OptionalQuantity)) checkClass = "abc-checkbox-warning";
        else if ((i >= Food.MaxQuantity + Food.OptionalQuantity)) checkClass = "abc-checkbox-danger";

        string checkGuid = Guid.NewGuid().ToString();

        <td>
            <div class="form-check abc-checkbox abc-checkbox-md @checkClass">
                <input class="form-check-input" id="check-@checkGuid"
                       type="checkbox" checked="@((actualCount > 0))" disabled="@((actualCount < 0))" @onchange="eventArgs => { ChangeQty(i, eventArgs.Value); }" />
                <label for="check-@checkGuid"></label>
            </div>
        </td>
        actualCount--;
    }

    <td><button class="btn btn-info" id="btn-addover" @onclick="() => Food.OverQuantity++"><i class="fa fa-plus" aria-hidden="true"></i></button></td>
</tr>


@code {

    [Parameter]
    public Food Food { get; set; }

    private void ChangeQty(int checkNumber, object checkedValue)
    {
        if ((bool)checkedValue)
            Food.ActualQuantity++;
        else
            Food.ActualQuantity--;
    }
}
