@inject IFoodRepository FoodRepository
@inject NavigationManager NavManager

@using Foodly.Shared
@using Foodly.Shared.Repositories

<tr>
    <th scope="row" style="min-width: 150px" @onclick="ToggleDeleteButton">
        <div>
            <p class="d-inline-block mt-2">@Food.Name</p>
            @if (showDeleteButton && ! showDeleteConfirmationButton) 
            {
                <button class="btn btn-danger ml-2 d-inline-block z-index-3"><i class="fa fa-trash-o" aria-hidden="true" @onclick="ShowDeleteConfirmation" @onclick:stopPropagation="true"></i></button>
            }
            @if (showDeleteConfirmationButton)
            {
                <button class="btn btn-danger ml-2 d-inline-block z-index-3"><i class="fa fa-check-circle-o" aria-hidden="true" @onclick="DeleteFood"></i></button>
            }
        </div>
    </th>

    @{
        int actualCount = Food.ActualQuantity;
    }

    @for (int i = 0; i < Food.MaxQuantity + Food.OptionalQuantity + Food.OverQuantity; i++)
    {
        string checkClass = "abc-checkbox-success";
        if ((i >= Food.MaxQuantity && i < Food.MaxQuantity + Food.OptionalQuantity)) checkClass = "abc-checkbox-warning";
        else if ((i >= Food.MaxQuantity + Food.OptionalQuantity)) checkClass = "abc-checkbox-danger";

        string checkGuid = Guid.NewGuid().ToString();

        <td style="min-width: 70px">
            <div class="form-check abc-checkbox checkbox-inline abc-checkbox-md @checkClass">
                <input class="form-check-input" id="check-@checkGuid"
                       type="checkbox" checked="@((actualCount > 0))" disabled="@((actualCount < 0))" @onchange="eventArgs => { ChangeQty(i, eventArgs.Value); }" />
                <label for="check-@checkGuid"></label>
            </div>
        </td>

        actualCount--;
    }

    @if (Food.ActualQuantity == Food.MaxQuantity + Food.OptionalQuantity + Food.OverQuantity)
    {
        <td><button class="btn btn-info ml-n1" id="btn-addover" @onclick="() => Food.OverQuantity++"><i class="fa fa-plus" aria-hidden="true"></i></button></td>
    }
</tr>


@code {

    [Parameter]
    public Food Food { get; set; }

    public bool showDeleteButton = false;
    public bool showDeleteConfirmationButton = false;

    private void ChangeQty(int checkNumber, object checkedValue)
    {
        if ((bool)checkedValue)
            Food.ActualQuantity++;
        else
            Food.ActualQuantity--;
    }

    private void ToggleDeleteButton()
    {
        if (showDeleteConfirmationButton)
            showDeleteButton = showDeleteConfirmationButton = false;
        else
            showDeleteButton = !showDeleteButton;
    }

    private void ShowDeleteConfirmation()
    {
        showDeleteButton = false;
        showDeleteConfirmationButton = true;
    }

    private void DeleteFood()
    {
        FoodRepository.DeleteFood(Food.Id);
        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
    }
}
